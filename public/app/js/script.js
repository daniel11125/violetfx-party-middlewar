let characters = [];



function showRecallButtonOnly() {
  const newBtn = document.querySelector(".newparty");
  const recallBtn = document.querySelector(".recall");
  const recallThreeBtn = document.querySelector(".recallthree")

  if (newBtn) newBtn.style.display = "none";
  if (recallBtn) recallBtn.style.display = "inline-block";
  if (recallThreeBtn) recallThreeBtn.style.display = "inline-block"; 
}





const roleMap = {
  "ÌûêÎü¨": ["ÌûêÎü¨", "ÏÇ¨Ï†ú", "ÏùåÏú†ÏãúÏù∏"],
  "ÌÉ±Ïª§": ["Ï†ÑÏÇ¨", "ÎåÄÍ≤ÄÏ†ÑÏÇ¨", "ÎπôÍ≤∞Ïà†ÏÇ¨", "ÏàòÎèÑÏÇ¨"],
  "ÎîúÎü¨": ["Í≤ÄÏà†ÏÇ¨", "ÎåÄÍ≤ÄÏ†ÑÏÇ¨", "Í∂ÅÏàò", "ÏÑùÍ∂ÅÏÇ¨Ïàò", "Ïû•Í∂ÅÎ≥ë", "ÌôîÏóºÏà†ÏÇ¨", "ÎπôÍ≤∞Ïà†ÏÇ¨", "ÏàòÎèÑÏÇ¨", "ÎåÑÏÑú", "ÏïÖÏÇ¨", "ÎßàÎ≤ïÏÇ¨"]
};

fetch("https://api.sheetbest.com/sheets/776e2812-99b8-4f67-ae74-4b0fa2d6a060")
  .then(res => res.json())
  .then(data => {
    characters = data.map(c => ({
      id: c.id,
      class: c.class,
      power: Number(c.power),
      thumbnail: c.thumbnail || null,
      msg: c.msg || "",
	   sp: c.sp || "" 
    }));
    console.log("‚úÖ Ï∫êÎ¶≠ÌÑ∞ Î°úÎî© ÏôÑÎ£å", characters);
   showAllMembers();

  })
  .catch(err => {
    console.error("‚ùå Ï∫êÎ¶≠ÌÑ∞ Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®", err);
  });

function filterByRole(role) {
  const list = roleMap[role];
  if (!list) {
    console.error(`‚ùå roleMapÏóê '${role}'Ïù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏùå`);
    return [];
  }
  return characters.filter(c => list.includes(c.class));
}

function generatePartyFromDisplayedCards() {
  if (!characters || characters.length === 0) {
    alert("‚è≥ Ï∫êÎ¶≠ÌÑ∞ Îç∞Ïù¥ÌÑ∞Î•º ÏïÑÏßÅ Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
    return;
  }

  const dealerList = filterByRole("ÎîúÎü¨");
  const tankList = filterByRole("ÌÉ±Ïª§");
  const healerList = filterByRole("ÌûêÎü¨");

  const selected = [];
  const dealers = getRandomUnique(dealerList, 2);
  selected.push(...dealers);

  const tank = getRandomUnique(tankList, 1, selected.map(c => c.id))[0];
  const healer = getRandomUnique(healerList, 1, selected.map(c => c.id).concat(tank.id))[0];
  selected.push(tank, healer);

  const selectedIds = selected.map(c => c.id);

  const cardContainer = document.getElementById("card-container") || document.getElementById("all-card-container");
  if (!cardContainer) {
    alert("Ïπ¥Îìú Ïª®ÌÖåÏù¥ÎÑàÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
    return;
  }

  // Ïª®ÌÖåÏù¥ÎÑà Ïä§ÌÉÄÏùº Ï†ïÎ†¨
  cardContainer.style.display = "flex";
  cardContainer.style.flexWrap = "nowrap";
  cardContainer.style.justifyContent = "center";
  cardContainer.style.gap = "40px";
  cardContainer.style.marginTop = "60px";
  cardContainer.style.transition = "all 0.6s ease";

  const allCards = Array.from(cardContainer.querySelectorAll(".card"));
  const selectedCardElements = [];

  allCards.forEach((cardEl) => {
    const idText = cardEl.querySelector("div[style*='right: 15px']").textContent.trim();
    const isSelected = selectedIds.includes(idText);

    if (!isSelected) {
      // ‚ùå ÏÇ¨ÎùºÏßà Ïπ¥Îìú: ÏïÑÎûòÎ°ú ÎÇ¥Î†§Í∞ÄÎ©∞ ÌéòÏù¥ÎìúÏïÑÏõÉ
      cardEl.style.transition = "transform 0.6s ease, opacity 0.6s ease";
      cardEl.style.transform = "translateY(100px)";
      cardEl.style.opacity = "0";
      setTimeout(() => {
        cardEl.parentElement.remove(); // .cardWrapper„Åî„Å® Ï†úÍ±∞
      }, 600);
    } else {
      // ‚úÖ ÎÇ®ÏùÑ Ïπ¥Îìú: Ï¥àÍ∏∞ ÏÑ§Ï†ï
      selectedCardElements.push(cardEl);
      cardEl.style.opacity = "0";
      cardEl.style.transform = "scale(0.9)";
      cardEl.style.transition = "all 0.6s ease";
    }
  });

  // üåà Î¨¥ÏßÄÍ∞ú Ïò§Ïò§Îùº Ïä§ÌÉÄÏùº Ï†ÅÏö©
  selectedCardElements.forEach((cardEl, i) => {
    setTimeout(() => {
      cardEl.style.opacity = "1";
      cardEl.style.transform = "scale(1.05) rotateY(360deg)";
      cardEl.style.zIndex = "10";
  cardEl.style.border = "1px solid white";

      cardEl.style.boxShadow = `
            0 0 10px rgba(255, 255, 255, 0.4),
		  0 0 30px rgba(255, 255, 255, 0.2),
		  0 0 60px rgba(255, 255, 255, 0.1)
      `;
	  cardEl.style.animation = "glowPulse 3s ease-in-out infinite";

      // cardEl.style.animation = "rainbowGlow 1.5s infinite ease-in-out";
    }, 600 + i * 200);
  });

  // Ï¥ù Ï†ÑÌà¨Î†• Ï∂úÎ†•
  const existingText = document.querySelector("#total-power-text");
  if (existingText) existingText.remove();

  const totalPower = selected.reduce((sum, c) => sum + c.power, 0);
  const totalEl = document.createElement("p");
  totalEl.id = "total-power-text";
  totalEl.style.marginTop = "30px";
  totalEl.style.textAlign = "center";
  totalEl.innerHTML = `<strong>‚öîÔ∏è Ï¥ù Ï†ÑÌà¨Î†•: ${totalPower}</strong>`;
  setTimeout(() => {
    cardContainer.parentElement.appendChild(totalEl);
  }, 600 + selectedCardElements.length * 200);

  showRecallButtonOnly(); // ÌååÌã∞ ÏÖîÌîå ÌõÑ Î≤ÑÌäº Ï†ÑÌôò


}




function getRandomUnique(arr, count, excluded = []) {
  const available = arr.filter(c => !excluded.includes(c.id));
  const shuffled = available.sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}



function generateParty() {
  if (!characters || characters.length === 0) {
    alert("‚è≥ Ï∫êÎ¶≠ÌÑ∞ Îç∞Ïù¥ÌÑ∞Î•º ÏïÑÏßÅ Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
    return;
  }

  // ÌååÌã∞Ïõê ÏÉàÎ°ú ÎΩëÍ∏∞
  const dealerList = filterByRole("ÎîúÎü¨");
  const tankList = filterByRole("ÌÉ±Ïª§");
  const healerList = filterByRole("ÌûêÎü¨");

  const selected = [];
  const dealers = getRandomUnique(dealerList, 2);
  selected.push(...dealers);

  const tank = getRandomUnique(tankList, 1, selected.map(c => c.id))[0];
  const healer = getRandomUnique(healerList, 1, selected.map(c => c.id).concat(tank.id))[0];
  selected.push(tank, healer);

  // Ïπ¥Îìú Ïª®ÌÖåÏù¥ÎÑà Ï¥àÍ∏∞Ìôî
  const partyEl = document.getElementById("party");
  partyEl.innerHTML = `<div id="card-container" class="card-container" style="display: flex; justify-content: center; gap: 40px;"></div>`;
  const container = document.getElementById("card-container");

  selected.forEach((c, i) => {
    const role = Object.keys(roleMap).find(r => roleMap[r].includes(c.class)) || "Í∏∞ÌÉÄ";
    const roleIcon = role === "ÎîúÎü¨" ? "üó°Ô∏è" : role === "ÌÉ±Ïª§" ? "üõ°Ô∏è" : "‚ú®";

    let stars = 3;
    if (c.power >= 19000) stars = 4;
    if (c.power >= 21000) stars = 5;
    if (c.power >= 23000) stars = 6;

const starOverlay = c.sp === 'use'
  ? `<span class="rainbow-stars">${'‚òÖ'.repeat(stars)}</span>`
  : getGoldStars(stars);

    const cardWrapper = document.createElement("div");
    cardWrapper.style.width = "200px";
    cardWrapper.style.display = "flex";
    cardWrapper.style.flexDirection = "column";
    cardWrapper.style.alignItems = "center";

    const card = document.createElement("div");
    card.className = "card";
    card.style.width = "200px";
    card.style.height = "320px";
    card.style.position = "relative";
    card.style.borderRadius = "8px";
    card.style.overflow = "hidden";
    card.style.opacity = "0";
    card.style.transform = "scale(0.7)";
    card.style.transition = "all 0.6s ease";

    const inner = c.thumbnail
      ? `<img src="${c.thumbnail}" alt="${c.id}" style="width: 100%; height: 100%; object-fit: cover;">`
      : `
        <div style="width: 100%; height: 100%; background: #eee; display: flex; justify-content: center; align-items: center;">
          <img src="./img/logo.svg" alt="default-logo" style="width: 100px; height: auto;">
        </div>
      `;

    const topLeft = `<div style="position: absolute; top: 12px; left: 15px; background: rgba(0, 0, 0, 0.5); color: white; font-size: 13px; padding: 2px 6px; border-radius: 4px;">${c.class}</div>`;
    const topRight = `<div style="position: absolute; top: 12px; right: 15px; background: rgba(0, 0, 0, 0.5); color: white; font-size: 13px; padding: 2px 6px; border-radius: 4px;">${c.id}</div>`;

    const messageText = (c.msg && c.msg.trim() !== "") ? c.msg.replaceAll('\n', '<br>') : '....';
    const messageCenter = `<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);  color: white; font-size: 14px; padding: 6px 10px; border-radius: 6px; text-align: center; max-width: 90%; font-family: 'Nanum Myeongjo', 'serif';">&quot;${messageText}&quot;</div>`;

    const bottomOverlay = `
      <div style="position: absolute; bottom: 0; left: 0; width: 100%; height: 140px; background: linear-gradient(to top, rgba(0,0,0,0.6), transparent); display: flex; align-items: flex-end; justify-content: space-between; padding: 10px 15px 15px; box-sizing: border-box; font-size: 12px; font-weight: bold;">
        <div style="color: white; font-size: 13px;">${roleIcon} ${role}</div>
        <div style="color: gold; text-align: right; line-height: 1.3;">
          <div style="font-size: 20px; font-style: italic; font-family: 'Nanum Myeongjo';">${c.power}</div>
          <div>${starOverlay}</div>
        </div>
      </div>
    `;

    card.innerHTML = inner + topLeft + topRight + messageCenter + bottomOverlay;
    cardWrapper.appendChild(card);
    container.appendChild(cardWrapper);

    // Îì±Ïû• Ïï†ÎãàÎ©îÏù¥ÏÖò + gold border
    setTimeout(() => {
	  card.style.opacity = "1";
	  card.style.transform = "scale(1.05) rotateY(360deg)";
	  card.style.zIndex = "10";
	card.style.border = "1px solid white";

	  card.style.boxShadow = `
            0 0 10px rgba(255, 255, 255, 0.4),
		  0 0 30px rgba(255, 255, 255, 0.2),
		  0 0 60px rgba(255, 255, 255, 0.1)
	  `;
	}, i * 200);
  });

  // Ï†ÑÌà¨Î†• ÌëúÏãú
  const totalPower = selected.reduce((sum, c) => sum + c.power, 0);
  const existingText = document.querySelector("#total-power-text");
  if (existingText) existingText.remove();

  const totalEl = document.createElement("p");
  totalEl.id = "total-power-text";
  totalEl.style.marginTop = "30px";
  totalEl.style.textAlign = "center";
  totalEl.innerHTML = `<strong>‚öîÔ∏è Ï¥ù Ï†ÑÌà¨Î†•: ${totalPower}</strong>`;
  setTimeout(() => {
    partyEl.appendChild(totalEl);
  }, selected.length * 200 + 300);

	setTimeout(() => {
	  const cards = document.querySelectorAll('.card');
	  cards.forEach(card => {
		card.classList.add('glow');
	  });
	}, selected.length * 200 + 400); // ÏÇ¥Ïßù Ïó¨Ïú† Ï§òÎèÑ Ï¢ãÏïÑ

}

function generatePartythree() {
	  console.log("‚úÖ 3Ïó∞Ï∞® Î≤ÑÌäº ÌÅ¥Î¶≠Îê®");

  generateParties(2); // 
}

function createCharacterCard(c) {
  const role = Object.keys(roleMap).find(r => roleMap[r].includes(c.class)) || "Í∏∞ÌÉÄ";
  const roleIcon = role === "ÎîúÎü¨" ? "üó°Ô∏è" : role === "ÌÉ±Ïª§" ? "üõ°Ô∏è" : "‚ú®";

  let stars = 3;
  if (c.power >= 19000) stars = 4;
  if (c.power >= 21000) stars = 5;
  if (c.power >= 23000) stars = 6;

  const starOverlay = c.sp === 'use'
    ? `<span class="rainbow-stars">${'‚òÖ'.repeat(stars)}</span>`
    : Array.from({ length: stars }, () =>
        `<span class="star-unit" style="color: gold;">‚òÖ</span>`).join('');

  const cardWrapper = document.createElement("div");
  cardWrapper.style.width = "200px";
  cardWrapper.style.display = "flex";
  cardWrapper.style.flexDirection = "column";
  cardWrapper.style.alignItems = "center";

  const card = document.createElement("div");
  card.className = "card";
  card.style.width = "200px";
  card.style.height = "320px";
  card.style.position = "relative";
  card.style.borderRadius = "8px";
  card.style.overflow = "hidden";
  card.style.transition = "all 0.6s ease";
  card.style.opacity = "0";                      // Îì±Ïû• Ï†Ñ Ïà®ÍπÄ
  card.style.transform = "scale(0.7) translateY(50px)";

  const inner = c.thumbnail
    ? `<img src="${c.thumbnail}" alt="${c.id}" style="width: 100%; height: 100%; object-fit: cover;">`
    : `<div style="width: 100%; height: 100%; background: #eee; display: flex; justify-content: center; align-items: center;">
          <img src="./img/logo.svg" alt="default-logo" style="width: 100px; height: auto;">
       </div>`;

  const topLeft = `<div style="position: absolute; top: 12px; left: 15px; background: rgba(0, 0, 0, 0.5); color: white; font-size: 13px; padding: 2px 6px; border-radius: 4px;">${c.class}</div>`;
  const topRight = `<div style="position: absolute; top: 12px; right: 15px; background: rgba(0, 0, 0, 0.5); color: white; font-size: 13px; padding: 2px 6px; border-radius: 4px;">${c.id}</div>`;

  const messageText = (c.msg && c.msg.trim() !== "") ? c.msg.replaceAll('\n', '<br>') : '....';
  const messageCenter = `<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);  color: white; font-size: 14px; padding: 6px 10px; border-radius: 6px; text-align: center; max-width: 90%; font-family: 'Nanum Myeongjo', 'serif';">&quot;${messageText}&quot;</div>`;

  const bottomOverlay = `
    <div style="position: absolute; bottom: 0; left: 0; width: 100%; height: 140px; background: linear-gradient(to top, rgba(0,0,0,0.6), transparent); display: flex; align-items: flex-end; justify-content: space-between; padding: 10px 15px 15px; box-sizing: border-box; font-size: 12px; font-weight: bold;">
      <div style="color: white; font-size: 13px;">${roleIcon} ${role}</div>
      <div style="color: gold; text-align: right; line-height: 1.3;">
        <div style="font-size: 20px; font-style: italic; font-family: 'Nanum Myeongjo';">${c.power}</div>
        <div>${starOverlay}</div>
      </div>
    </div>
  `;

  card.innerHTML = inner + topLeft + topRight + messageCenter + bottomOverlay;
  cardWrapper.appendChild(card);

  // Îì±Ïû• Ïï†ÎãàÎ©îÏù¥ÏÖò Ï†ÅÏö©
  setTimeout(() => {
    card.style.opacity = "1";
    card.style.transform = "scale(1.05) rotateY(360deg)";
    card.style.zIndex = "10";
    card.style.border = "1px solid white";
    card.style.boxShadow = `
      0 0 10px rgba(255, 255, 255, 0.4),
      0 0 30px rgba(255, 255, 255, 0.2),
      0 0 60px rgba(255, 255, 255, 0.1)
    `;
  }, 100 + Math.random() * 300);

  return cardWrapper;
}





function generateParties(num = 2) {
  if (!characters || characters.length === 0) {
    alert("‚è≥ Ï∫êÎ¶≠ÌÑ∞ Îç∞Ïù¥ÌÑ∞Î•º ÏïÑÏßÅ Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
    return;
  }

  const partyEl = document.getElementById("party");
  partyEl.innerHTML = ""; // Í∏∞Ï°¥ ÌååÌã∞ Ï†úÍ±∞

  const usedIds = new Set();
  const allSelected = [];

  for (let i = 0; i < num; i++) {
    const dealerList = filterByRole("ÎîúÎü¨").filter(c => !usedIds.has(c.id));
    const tankList = filterByRole("ÌÉ±Ïª§").filter(c => !usedIds.has(c.id));
    const healerList = filterByRole("ÌûêÎü¨").filter(c => !usedIds.has(c.id));

    console.log(`üåÄ ÌååÌã∞ ${i + 1} ÌõÑÎ≥¥ ‚ñ∂ ÎîúÎü¨:${dealerList.length}, ÌÉ±Ïª§:${tankList.length}, ÌûêÎü¨:${healerList.length}`);

    // Ï∫êÎ¶≠ÌÑ∞ Î∂ÄÏ°± Ïãú Ìï¥Îãπ ÌååÌã∞Îßå Í±¥ÎÑàÎõ¥Îã§
    if (dealerList.length < 2 || tankList.length < 1 || healerList.length < 1) {
      console.warn(`‚õî ÌååÌã∞ ${i + 1} Ïä§ÌÇµÎê® (ÌõÑÎ≥¥ Î∂ÄÏ°±)`);
      continue;
    }

    const party = [];
    const dealers = getRandomUnique(dealerList, 2);
    party.push(...dealers);

    const tank = getRandomUnique(tankList, 1, party.map(c => c.id))[0];
    const healer = getRandomUnique(healerList, 1, party.map(c => c.id).concat(tank.id))[0];
    party.push(tank, healer);

    party.forEach(c => usedIds.add(c.id));
    allSelected.push(party);

    console.log(`‚úÖ ÌååÌã∞ ${i + 1} Íµ¨ÏÑ± ÏôÑÎ£å ‚ñ∂`, party.map(c => c.id));
  }

  if (allSelected.length === 0) {
    console.error("‚ùå ÏÉùÏÑ±Îêú ÌååÌã∞Í∞Ä ÏóÜÏäµÎãàÎã§.");
    partyEl.innerHTML = "<p style='text-align:center; color: red;'>‚ö†Ô∏è ÏÉùÏÑ± Í∞ÄÎä•Ìïú ÌååÌã∞Í∞Ä ÏóÜÏäµÎãàÎã§.</p>";
    return;
  }

  // ÌååÌã∞ Î†åÎçîÎßÅ
  allSelected.forEach((party, index) => {
    const rowTitle = document.createElement("h3");
    rowTitle.textContent = `üí† ${index + 1}Î≤à ÌååÌã∞`;
    rowTitle.style.textAlign = "center";
    rowTitle.style.marginBottom = "10px";

    const row = document.createElement("div");
    row.className = "party-row";
    row.style.display = "flex";
    row.style.justifyContent = "center";
    row.style.gap = "30px";
    row.style.marginBottom = "40px";

    party.forEach((c) => {
      const card = createCharacterCard(c);
      row.appendChild(card);
    });

    //partyEl.appendChild(rowTitle);
    partyEl.appendChild(row);
  });

  // Ï¥ù Ï†ÑÌà¨Î†• ÌëúÏãú
  const totalPower = allSelected.flat().reduce((sum, c) => sum + c.power, 0);
  const totalEl = document.createElement("p");
  totalEl.style.textAlign = "center";
  totalEl.style.marginTop = "20px";
  totalEl.innerHTML = `<strong>‚öîÔ∏è Ï¥ù Ï†ÑÌà¨Î†•: ${totalPower}</strong>`;
  partyEl.appendChild(totalEl);


console.log("üé® ÏµúÏ¢Ö Î†åÎçîÎßÅÎêú ÌååÌã∞ DOM:", partyEl.innerHTML);


}




function showAllMembers() {
  if (!characters || characters.length === 0) {
    alert("‚è≥ Ï∫êÎ¶≠ÌÑ∞ Îç∞Ïù¥ÌÑ∞Î•º ÏïÑÏßÅ Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
    return;
  }

  const partyEl = document.getElementById("party");
  partyEl.innerHTML = `<div id="all-card-container" style="display: flex; flex-wrap: wrap; justify-content: center; gap: 20px;"></div>`;
  const container = document.getElementById("all-card-container");

  characters.forEach((c, i) => {
    const role = Object.entries(roleMap).find(([_, classes]) => classes.includes(c.class))?.[0] || "Í∏∞ÌÉÄ";
    const roleIcon = role === "ÎîúÎü¨" ? "üó°Ô∏è" : role === "ÌÉ±Ïª§" ? "üõ°Ô∏è" : role === "ÌûêÎü¨" ? "‚ú®" : "‚ùî";
    const roleLabel = role;

    let stars = 3;
    if (c.power >= 19000) stars = 4;
    if (c.power >= 21000) stars = 5;
    if (c.power >= 23000) stars = 6;

	const starOverlay = c.sp === 'use'
	  ? `<span class="rainbow-stars">${'‚òÖ'.repeat(stars)}</span>`
	  : getGoldStars(stars);


		const cardWrapper = document.createElement("div");
		cardWrapper.style.width = "200px";
		cardWrapper.style.display = "flex";
		cardWrapper.style.flexDirection = "column";
		cardWrapper.style.alignItems = "center";

		const card = document.createElement("div");
		card.className = "card";
		card.style.width = "200px";
		card.style.height = "320px";
		card.style.position = "relative";
		card.style.borderRadius = "8px";
		card.style.overflow = "hidden";
		card.style.opacity = "0";
		card.style.transform = "scale(0.7) translateY(50px)";
		card.style.transition = "all 0.6s ease";



		const inner = c.thumbnail
		  ? `<img src="${c.thumbnail}" alt="${c.id}" style="width: 100%; height: 100%; object-fit: cover;">`
		  : `
			<div style="width: 100%; height: 100%; background: #eee; display: flex; justify-content: center; align-items: center;">
			  <img src="./img/logo.svg" alt="default-logo" style="width: 100px; height: auto;">
			</div>
		  `;


		const topLeft = `<div style="position: absolute; top: 12px; left: 15px; background: rgba(0, 0, 0, 0.5); color: white; font-size: 13px; padding: 2px 6px; border-radius: 4px;">${c.class}</div>`;
		const topRight = `<div style="position: absolute; top: 12px; right: 15px; background: rgba(0, 0, 0, 0.5); color: white; font-size: 13px; padding: 2px 6px; border-radius: 4px;">${c.id}</div>`;

		const messageText = (c.msg && c.msg.trim() !== "") ? c.msg.split('\n').join('<br>') : '....';
		const messageCenter = c.msg ? `<div style="min-width: 120px; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: white; font-size: 14px; padding: 6px 10px; border-radius: 6px; text-align: center; max-width: 90%; font-family: 'Nanum Myeongjo', 'serif';">&quot;${messageText}&quot;</div>` : "";

		const bottomOverlay = `
		  <div style="position: absolute; bottom: 0; left: 0; width: 100%; height: 140px; background: linear-gradient(to top, rgba(0,0,0,0.6), transparent); display: flex; align-items: flex-end; justify-content: space-between; padding: 10px 15px 15px; box-sizing: border-box; font-size: 12px; font-weight: bold;">
			<div style="color: white; font-size: 13px;">${roleIcon} ${roleLabel}</div>
			<div style="color: gold; text-align: right; line-height: 1.3;">
			  <div style="font-size: 20px; font-style: italic; font-family: 'Nanum Myeongjo';">${c.power}</div>
			  <div>${starOverlay}</div>
			</div>
		  </div>
		`;

		card.innerHTML = inner + topLeft + topRight + messageCenter + bottomOverlay;
		cardWrapper.appendChild(card);
		container.appendChild(cardWrapper);

		setTimeout(() => {
		  card.style.opacity = "1";
		  card.style.transform = "scale(1) translateY(0)";
		}, i * 100);





  });
}

function getGoldStars(stars) {
  return Array.from({ length: stars }, () => 
    `<span class="star-unit" style="color: gold;">‚òÖ</span>`).join('');
}

function getAnimatedStars(stars) {
  const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];
  let html = '';

  for (let i = 0; i < stars; i++) {
    const color = colors[i % colors.length];
    html += `
      <span class="star-unit glow-star" style="color: ${color}; animation-delay: ${i * 0.2}s;">‚òÖ</span>
    `;
  }

  return html;
}


async function generatePartyKakao() {
  const url = "https://violetfx-party-middlewar-production.up.railway.app/party";

  try {
    const res = await fetch(url);
    if (!res.ok) throw new Error("ÎÑ§Ìä∏ÏõåÌÅ¨ ÏùëÎãµ Ïã§Ìå®");

    const data = await res.json();
    if (!Array.isArray(data) || data.length === 0) {
      alert("üîç Ïπ¥Ïπ¥Ïò§ ÌååÌã∞ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.");
      return;
    }

    const partyEl = document.getElementById("party");
    partyEl.innerHTML = ""; // Í∏∞Ï°¥ ÎÇ¥Ïö© Ï†úÍ±∞

    data.forEach((partyData, index) => {
      const kakaoMembers = partyData.members.map(m => m.trim());

      // Ìï¥Îãπ ÌååÌã∞ Î©§Î≤Ñ Ï§ë Ï†ÑÌà¨Î†• ÎÜíÏùÄ Ï∫êÎ¶≠ÌÑ∞Îßå ÎÇ®Í∏∞Í∏∞
      const filteredCharacters = deduplicateByIdKeepHighestPower(
        characters.filter(c => kakaoMembers.includes(c.id))
      );

      // ÌååÌã∞ Ï†úÎ™©
      const title = document.createElement("h3");
      title.textContent = `üí† ÌååÌã∞Ïû•: ${partyData.host.trim()}`;
      title.style.textAlign = "center";
      title.style.marginBottom = "10px";

      // Ïπ¥Îìú Ïª®ÌÖåÏù¥ÎÑà
      const container = document.createElement("div");
      container.className = "party-row";
      container.style.display = "flex";
      container.style.flexWrap = "wrap";
      container.style.justifyContent = "center";
      container.style.gap = "20px";
      container.style.marginBottom = "40px";

      filteredCharacters.forEach(c => {
        const card = createCharacterCard(c);
        container.appendChild(card);
      });

      // ÌååÌã∞ Ï†ÑÌà¨Î†• ÌëúÏãú
      const totalPower = filteredCharacters.reduce((sum, c) => sum + c.power, 0);
      const totalEl = document.createElement("p");
      totalEl.style.textAlign = "center";
      totalEl.style.marginBottom = "30px";
      totalEl.innerHTML = `<strong>‚öîÔ∏è Ï¥ù Ï†ÑÌà¨Î†•: ${totalPower}</strong>`;

      // Î†åÎçîÎßÅ
      partyEl.appendChild(title);
      partyEl.appendChild(container);
      partyEl.appendChild(totalEl);
    });

    console.log("üü° Ïπ¥Ïπ¥Ïò§ Ïó∞Îèô Ï†ÑÏ≤¥ ÌååÌã∞ Î†åÎçîÎßÅ ÏôÑÎ£å");

  } catch (err) {
    console.error("‚ùå Ïπ¥Ïπ¥Ïò§ ÌååÌã∞ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", err);
    alert("‚ùå Ïπ¥Ïπ¥Ïò§ ÌååÌã∞ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
  }
}


function deduplicateByIdKeepHighestPower(characters) {
  const map = new Map();

  characters.forEach(c => {
    const existing = map.get(c.id);
    if (!existing || c.power > existing.power) {
      map.set(c.id, c);
    }
  });

  return Array.from(map.values());
}